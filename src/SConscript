#! /usr/bin/python

# @file

#
#
# @section DESCRIPTION

import os

Import('env')

# set the source files
f90_sources = [
"Config.f90",
"SFC_main.f90",
"SFC_traversal.f90",
"Tests/Tests.f90",
"Tests/Tests_data_types.f90",
"Tests/Tests_initialize.f90",
"Tests/Tests_node_dummy_traversal.f90",
"Tests/Tests_consistency_traversal.f90",
"Tests/Tests_flops_traversal.f90",
"Tests/Tests_memory_traversal.f90",
"Tests/Tests_basis_functions.f90",
"Generic/Generic.f90",
"Generic/Generic_data_types.f90",
"Generic/Generic_initialize.f90",
"Generic/Generic_template.f90",
"Generic/Generic_adapt_template.f90",
"SWE/SWE.f90",
"SWE/SWE_local_function_spaces.f90",
"SWE/SWE_data_types.f90",
"SWE/SWE_dg_matrices.f90",
"SWE/SWE_basis.f90",
"SWE/SWE_initialize.f90",
"SWE/SWE_output.f90",
"SWE/SWE_xml_output.f90",
"SWE/SWE_xml_point_output.f90",
"SWE/SWE_DG_Limiter.f90",    
"SWE/SWE_PDE.f90",     
"SWE/SWE_probe_output.f90",
"SWE/SWE_adapt.f90",
"SWE/SWE_patch.f90",
"SWE/SWE_patch_solvers.f90",
"SWE/SWE_dg_predictor.f90",
"SWE/SWE_dg_solver.f90",
"SWE/SWE_Scenario.f90",
"SWE/SWE_displace.f90",
"geoclaw/c_bind_riemannsolvers.f90",
"Samoa/Samoa.f90",
"Samoa/Tools_quadrature_rule_base.f90",
"Solver/LinearSolver.f90",
"SFC_node_traversal.f90",
"SFC_edge_traversal.f90",
"SFC_data_types.f90",
"LIB_VTK_IO.f90",
"M_kracken.f90",
"Tools_noise.f90",
"Tools_log.f90",
"Tools_statistics.f90",
"Conformity/Conformity.f90",
]

f77_sources = [
"geoclaw/riemannsolvers.f",
"geoclaw/riemannsolvers_sp.f",
"geoclaw/riemannsolvers_qp.f",
]

if env['xdmf']: 
    f90_sources+=[
        "XDMF/XDMF_config.f90",
        "XDMF/XDMF_data_types.f90",
        "XDMF/XDMF_hdf5.f90",
        "XDMF/XDMF_math.f90",
        "XDMF/input/XDMF_fox.f90",
        "XDMF/input/XDMF_initialize_base_data_types.f90",
        "XDMF/input/XDMF_initialize_base.f90",
        "XDMF/output/XDMF_output_base_data_types.f90",
        "XDMF/output/XDMF_output_base.f90",
        "XDMF/output/XDMF_xmf.f90",
        "SWE/SWE_XDMF_config.f90",
        "SWE/SWE_XDMF_output_filter.f90",
        "SWE/SWE_XDMF_output.f90",
        "SWE/SWE_XDMF_initialize.f90",
        "SWE/SWE_XDMF_adapt.f90"
    ]

if env['boundary'] == 'file':
    f90_sources += [
        "Tools_boundary_file.f90"
    ]

objs = env.Object(f90_sources) + env.Object(f77_sources)
env.obj_files += [obj for obj in objs if obj.get_suffix() == ".o"]

Export('env')
