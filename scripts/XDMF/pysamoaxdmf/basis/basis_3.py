from numba import njit

@njit
def basis_0(x,y):
  return -5.000000000000001*(x - 1.0)**3 - 3.000000000000012*(x - 1.0)**2*y - (7.500000000000032*x - 7.500000000000032)*y**2 + (-8.499999999999984*x + 1.214285714285712)*y**2 - 5.000000000000021*y**3 - 5.000000000000001*(x - 1.0)**2 - (8.499999999999984*(x - 1.0)**2 + 7.285714285714272*x - 7.285714285714272)*y + (-4.500000000000007*(x - 1.0)**2 - 6.428571428571439*x + 4.285714285714292)*y + (1.285714285714287*x - 1.285714285714287)*y - (-1.4285714285714266*x + 0.2857142857142853)*y + 1.285714285714287*y**2 - 1.000000000000001*x + 1.000000000000002

@njit
def basis_1(x,y):
  return 11.18033988749895*(x - 1.0)**3 + (1.55560001816513e-14)*(x - 1.0)**2*y + ((3.88900004541284e-14)*x - 3.88900004541284e-14)*y**2 - (-13.090169943749459*x + 1.870024277678494)*y**2 + (2.59266669694189e-14)*y**3 + 14.27050983124842*(x - 1.0)**2 + (13.090169943749459*(x - 1.0)**2 + 11.220145666070964*x - 11.220145666070964)*y - (-11.180339887498954*(x - 1.0)**2 - 15.971914124998506*x + 10.647942749999004)*y + (1.870024277678493*x - 1.870024277678493)*y + (-1.7014042937500702*x + 0.340280858750014)*y + 1.870024277678493*y**2 + 3.090169943749475*x - 0.8726779962499669*y - 3.090169943749476

@njit
def basis_2(x,y):
  return -11.18033988749895*(x - 1.0)**3 - (1.68599645229816e-14)*(x - 1.0)**2*y - ((4.21499113074541e-14)*x - 4.21499113074541e-14)*y**2 - (-1.9098300562505353*x + 0.2728328651786479)*y**2 - (2.8099940871636e-14)*y**3 - 19.27050983124843*(x - 1.0)**2 + (1.9098300562505353*(x - 1.0)**2 + 1.6369971910718875*x - 1.6369971910718875)*y + (-11.180339887498954*(x - 1.0)**2 - 15.971914124998506*x + 10.647942749999004)*y + (0.2728328651786488*x - 0.2728328651786488)*y + (-3.298595706249933*x + 0.6597191412499865)*y + 0.2728328651786488*y**2 - 8.090169943749478*x - 0.1273220037500336*y + 8.09016994374948

@njit
def basis_3(x,y):
  return 4.999999999999998*(x - 1.0)**3 + (-1.000000000000008*x + 0.142857142857144)*y**2 + 9.999999999999998*(x - 1.0)**2 - (1.000000000000008*(x - 1.0)**2 + 0.8571428571428639*x - 0.8571428571428639)*y - (0.1428571428571444*x - 0.1428571428571444)*y - 0.1428571428571444*y**2 + 6.0*x - 4.999999999999999

@njit
def basis_4(x,y):
  return -(3.44169137633799e-15)*(x - 1.0)**3 + 6.708203932499382*(x - 1.0)**2*y + (16.77050983124845*x - 16.77050983124845)*y**2 - (-7.499999999999982*x + 1.071428571428569)*y**2 + 11.18033988749897*y**3 - (5.10702591327572e-15)*(x - 1.0)**2 + (7.499999999999982*(x - 1.0)**2 + 6.428571428571414*x - 6.428571428571414)*y + (-1.1180339887498933*(x - 1.0)**2 - 1.5971914124998476*x + 1.0647942749998984)*y - (1.428571428571427*x - 1.428571428571427)*y - (-1.5971914124998545*x + 0.3194382824999709)*y - 1.428571428571427*y**2 - (1.66533453693774e-15)*x - 0.7453559924999313*y + 1.84574577843932e-15

@njit
def basis_5(x,y):
  return (1.33226762955019e-14)*(x - 1.0)**3 + (-26.999999999999993*x + 3.857142857142856)*y**2 + (2.18713935851156e-14)*(x - 1.0)**2 - (26.999999999999993*(x - 1.0)**2 + 23.142857142857135*x - 23.142857142857135)*y - (3.857142857142856*x - 3.857142857142856)*y - 3.857142857142856*y**2 + (1.08163391975835e-14)*x + (2.09275316176419e-15)*y - 9.93649607039515e-15

@njit
def basis_6(x,y):
  return -(6.16173778666962e-15)*(x - 1.0)**3 + (1.909830056250533*x - 0.2728328651786476)*y**2 - (1.0547118733939e-14)*(x - 1.0)**2 + (1.909830056250533*(x - 1.0)**2 + 1.6369971910718855*x - 1.6369971910718855)*y - (-11.18033988749893*(x - 1.0)**2 - 15.97191412499847*x + 10.647942749998979)*y + (0.2728328651786478*x - 0.2728328651786478)*y - (-3.298595706249923*x + 0.6597191412499847)*y + 0.2728328651786478*y**2 - (4.8017145815038e-15)*x + 0.1273220037500342*y + 5.59274848654923e-15

@njit
def basis_7(x,y):
  return -(4.10782519111308e-15)*(x - 1.0)**3 - 6.708203932499368*(x - 1.0)**2*y - (16.77050983124842*x - 16.77050983124842)*y**2 - (-7.500000000000004*x + 1.071428571428572)*y**2 - 11.18033988749895*y**3 - (6.55031584528842e-15)*(x - 1.0)**2 + (7.500000000000004*(x - 1.0)**2 + 6.428571428571432*x - 6.428571428571432)*y - (-1.1180339887498971*(x - 1.0)**2 - 1.597191412499853*x + 1.064794274999902)*y - (1.428571428571429*x - 1.428571428571429)*y + (-1.59719141249985*x + 0.31943828249997)*y - 1.428571428571429*y**2 - (2.94209101525666e-15)*x + 0.7453559924999295*y + 2.80331313717852e-15

@njit
def basis_8(x,y):
  return (3.5527136788005e-15)*(x - 1.0)**3 + (13.090169943749451*x - 1.870024277678493)*y**2 + (6.16173778666962e-15)*(x - 1.0)**2 + (13.090169943749451*(x - 1.0)**2 + 11.220145666070959*x - 11.220145666070959)*y + (-11.180339887498931*(x - 1.0)**2 - 15.971914124998474*x + 10.647942749998982)*y + (1.870024277678493*x - 1.870024277678493)*y - (-1.701404293750077*x + 0.3402808587500154)*y + 1.870024277678493*y**2 + (3.38618022510673e-15)*x + 0.8726779962499648*y - 3.33066907387547e-15

@njit
def basis_9(x,y):
  return -(8.04911692853238e-16)*(x - 1.0)**3 + 2.999999999999998*(x - 1.0)**2*y + (7.499999999999996*x - 7.499999999999996)*y**2 + (-8.499999999999998*x + 1.214285714285714)*y**2 + 4.999999999999997*y**3 - (2.05391259555654e-15)*(x - 1.0)**2 - (8.499999999999998*(x - 1.0)**2 + 7.285714285714284*x - 7.285714285714284)*y - (-4.499999999999992*(x - 1.0)**2 - 6.428571428571417*x + 4.2857142857142785)*y + (1.285714285714286*x - 1.285714285714286)*y + (-1.42857142857143*x + 0.285714285714286)*y + 1.285714285714286*y**2 - (8.88178419700125e-16)*x + 1.08246744900953e-15

basis=[basis_0,basis_1,basis_2,basis_3,basis_4,basis_5,basis_6,basis_7,basis_8,basis_9] 

def interpolate(x,y,Q):
    assert(len(Q) == len(basis))
    result = 0
    for i in range(len(Q)):
        result = result + basis[i](x,y) * Q[i]
    return result
